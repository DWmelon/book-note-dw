package database.com.simplenote;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.simplenote.database.model.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, String> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoteId = new Property(0, String.class, "noteId", true, "NOTE_ID");
        public final static Property NoteCode = new Property(1, String.class, "noteCode", false, "NOTE_CODE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property CreateDate = new Property(4, Long.class, "createDate", false, "CREATE_DATE");
        public final static Property ModifyDate = new Property(5, Long.class, "modifyDate", false, "MODIFY_DATE");
        public final static Property Emotion = new Property(6, String.class, "emotion", false, "EMOTION");
        public final static Property Weather = new Property(7, String.class, "weather", false, "WEATHER");
        public final static Property Theme = new Property(8, String.class, "theme", false, "THEME");
        public final static Property ImageNameList = new Property(9, String.class, "imageNameList", false, "IMAGE_NAME_LIST");
        public final static Property UserId = new Property(10, Long.class, "userId", false, "USER_ID");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
    }


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"NOTE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: noteId
                "\"NOTE_CODE\" TEXT," + // 1: noteCode
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"CREATE_DATE\" INTEGER," + // 4: createDate
                "\"MODIFY_DATE\" INTEGER," + // 5: modifyDate
                "\"EMOTION\" TEXT," + // 6: emotion
                "\"WEATHER\" TEXT," + // 7: weather
                "\"THEME\" TEXT," + // 8: theme
                "\"IMAGE_NAME_LIST\" TEXT," + // 9: imageNameList
                "\"USER_ID\" INTEGER," + // 10: userId
                "\"STATUS\" INTEGER NOT NULL );"); // 11: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        String noteId = entity.getNoteId();
        if (noteId != null) {
            stmt.bindString(1, noteId);
        }
 
        String noteCode = entity.getNoteCode();
        if (noteCode != null) {
            stmt.bindString(2, noteCode);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate);
        }
 
        Long modifyDate = entity.getModifyDate();
        if (modifyDate != null) {
            stmt.bindLong(6, modifyDate);
        }
 
        String emotion = entity.getEmotion();
        if (emotion != null) {
            stmt.bindString(7, emotion);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(8, weather);
        }
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(9, theme);
        }
 
        String imageNameList = entity.getImageNameList();
        if (imageNameList != null) {
            stmt.bindString(10, imageNameList);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(11, userId);
        }
        stmt.bindLong(12, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        String noteId = entity.getNoteId();
        if (noteId != null) {
            stmt.bindString(1, noteId);
        }
 
        String noteCode = entity.getNoteCode();
        if (noteCode != null) {
            stmt.bindString(2, noteCode);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate);
        }
 
        Long modifyDate = entity.getModifyDate();
        if (modifyDate != null) {
            stmt.bindLong(6, modifyDate);
        }
 
        String emotion = entity.getEmotion();
        if (emotion != null) {
            stmt.bindString(7, emotion);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(8, weather);
        }
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(9, theme);
        }
 
        String imageNameList = entity.getImageNameList();
        if (imageNameList != null) {
            stmt.bindString(10, imageNameList);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(11, userId);
        }
        stmt.bindLong(12, entity.getStatus());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // noteId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noteCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // createDate
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // modifyDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // emotion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weather
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // theme
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // imageNameList
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // userId
            cursor.getInt(offset + 11) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setNoteId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNoteCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setModifyDate(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setEmotion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeather(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTheme(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImageNameList(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Note entity, long rowId) {
        return entity.getNoteId();
    }
    
    @Override
    public String getKey(Note entity) {
        if(entity != null) {
            return entity.getNoteId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getNoteId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
